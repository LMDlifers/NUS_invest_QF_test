import random
import math
from functools import reduce

"""
Roll a 10-sided die and keep track of the numbers.
Calculate the LCM of the rolled numbers each time.
Stop when the LCM is greater than 2000.
Repeat this process many times to find out the average number of rolls needed.
The result is that on average, it takes about 18.84 rolls to reach an LCM greater than 2000.
"""



def lcm(a, b):
    return abs(a * b) // math.gcd(a, b)

def lcm_multiple(numbers):
    return reduce(lcm, numbers, 1) # accumulate

def simulate_rolls_until_lcm():
    """
    Each new number might increase the LCM if it 
    has prime factors that haven't been included enough times yet.
    """
    rolls = []
    lcm_value = 1 
    count = 0

    while lcm_value <= 2000:
        roll = random.randint(1, 10) # random walk
        rolls.append(roll)
        lcm_value = lcm_multiple(rolls)
        count += 1
    
    return count

def estimate_expected_rolls(num_simulations):
    total_rolls = sum(simulate_rolls_until_lcm() for _ in range(num_simulations))
    return total_rolls / num_simulations

num_simulations = 10000

def main():
    for _ in range(1, 31): # CLT
        expected_rolls = estimate_expected_rolls(num_simulations)
        print(f"Expected number of rolls until LCM exceeds 2000: {expected_rolls}")


if __name__ == "__main__":
    main()
